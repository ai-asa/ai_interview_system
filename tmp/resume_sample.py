# 起動しておき、lineからのwebhookを受け取れるようにしておく
# webhookによって、友達追加を受けると、DB上にuserIDを登録する
# 初期のリッチメニューを表示する

# 共有すべき課題
# ローカルでサーバーを開く場合は、ngrokの有料プランを使用しないと常時起動出来ない
#   有料プランが必要であることを事前に連絡する必要がある（$60/年）
# GCP環境であれば、このような工夫は必要なくなると思われる
#   ただし、技術的なネックがある
#   ・画像取得時にどのように保存するか（GCPのディレクトリサービスと連携？）
#   ・面接アバターシステムとどのように連携するか（どのように情報を受け取るか）
# →どのみち、通知をローカルに送る必要があることから、ローカルサーバーでの起動が必要になる
#  ローカルサーバーでの起動が必須なので、ngrokの有料プランについては了承いただく必要あり

# 宿題
# ngrokを使用したローカルサーバーにより、LINEからのwebhookを受け取れるようにしておく
# 上記の条件下で、一通り開発を進めてみる
# 面接システムを重点的に開発を進める

{
  "氏名": {
    "名前": "山田太郎",
    "ふりがな": "やまだたろう"
  },
  "年齢": 28,
  "連絡先": {
    "電話番号": "090-XXX-XXX",
    "メールアドレス": "mail@co.jp"
  },
  "経歴": {
    "IT職の経験年数": 5,
    "保有資格": [
      {
        "年": 2023,
        "内容": "ITパスポート"
      },
      {
        "年": 2023,
        "内容": "G検定"
      },
      {
        "年": 2024,
        "内容": "AWSクラウドプラティクショナー"
      }
    ],
    "ITスキル": {
      "プログラミング言語": ["python", "java"],
      "フレームワーク": "React",
      "データベース": "MySQL",
      "その他": ["Git", "Docker"]
    },
    "学歴": [
      {
        "年": 2015,
        "学校名、学部、学科": "東京大学経済学部"
      },
      {
        "年": 2022,
        "学校名、学部、学科": "東京大学経済学部"
      }
    ],
    "職歴": [
      {
        "年": 2023,
        "内容": "株式会社XX　営業担当"
      },
      {
        "年": 2025,
        "内容": "株式会社XX　技術営業"
      }
    ]
  },
  "志望動機": "営業職としての経験を活かしたい",
  "趣味、特技": "フットサル",
  "希望職種": "営業職を希望"
}

# 目的：履歴書、合格基準に従って、必要な質問を求職者に行うこと
# 必要な機能：
# ・履歴書の各項目について質問事項、または合格基準に満たしているかを質問する
# ・一問一答式ではなく、求職者側の質問や聞き返しにも対応する
# ・履歴書の内容、合格基準、会話の履歴から、それらしい応答をAIに考えさせる
# どのようにして実現できるか：
# ・おそらく、ひとつのプロンプトでは対応できない
#   ・面接の段階、フェーズに応じてプロンプトを変更する必要がある
#   ・事前に必ず聞くべき事項、段階を設定しておき、それに伴ってプロンプトを変更する
#   ・面接の段階、フェーズを何らかの方法で判断し、ループすること無く進行させる
#       ・毎質問の裏で、別のAPIを回し、今回の相手の回答で次の質問に移るべきかを判断させる
